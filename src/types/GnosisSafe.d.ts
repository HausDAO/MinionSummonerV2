/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GnosisSafeInterface extends ethers.utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "addOwnerWithThreshold(address,uint256)": FunctionFragment;
    "approveHash(bytes32)": FunctionFragment;
    "approvedHashes(address,bytes32)": FunctionFragment;
    "changeThreshold(uint256)": FunctionFragment;
    "checkNSignatures(bytes32,bytes,bytes,uint256)": FunctionFragment;
    "checkSignatures(bytes32,bytes,bytes)": FunctionFragment;
    "disableModule(address,address)": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "enableModule(address)": FunctionFragment;
    "encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)": FunctionFragment;
    "execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)": FunctionFragment;
    "execTransactionFromModule(address,uint256,bytes,uint8)": FunctionFragment;
    "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getModulesPaginated(address,uint256)": FunctionFragment;
    "getOwners()": FunctionFragment;
    "getStorageAt(uint256,uint256)": FunctionFragment;
    "getThreshold()": FunctionFragment;
    "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)": FunctionFragment;
    "isModuleEnabled(address)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "nonce()": FunctionFragment;
    "removeOwner(address,address,uint256)": FunctionFragment;
    "requiredTxGas(address,uint256,bytes,uint8)": FunctionFragment;
    "setFallbackHandler(address)": FunctionFragment;
    "setGuard(address)": FunctionFragment;
    "setup(address[],uint256,address,bytes,address,address,uint256,address)": FunctionFragment;
    "signedMessages(bytes32)": FunctionFragment;
    "simulateAndRevert(address,bytes)": FunctionFragment;
    "swapOwner(address,address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addOwnerWithThreshold",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedHashes",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkNSignatures",
    values: [BytesLike, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSignatures",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableModule",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableModule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeTransactionData",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransaction",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModule",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModuleReturnData",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getModulesPaginated",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStorageAt",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionHash",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isModuleEnabled",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeOwner",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredTxGas",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFallbackHandler",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setGuard", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setup",
    values: [
      string[],
      BigNumberish,
      string,
      BytesLike,
      string,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signedMessages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "simulateAndRevert",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOwner",
    values: [string, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addOwnerWithThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkNSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encodeTransactionData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModuleReturnData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getModulesPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStorageAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isModuleEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredTxGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFallbackHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGuard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simulateAndRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapOwner", data: BytesLike): Result;

  events: {
    "AddedOwner(address)": EventFragment;
    "ApproveHash(bytes32,address)": EventFragment;
    "ChangedFallbackHandler(address)": EventFragment;
    "ChangedGuard(address)": EventFragment;
    "ChangedThreshold(uint256)": EventFragment;
    "DisabledModule(address)": EventFragment;
    "EnabledModule(address)": EventFragment;
    "ExecutionFailure(bytes32,uint256)": EventFragment;
    "ExecutionFromModuleFailure(address)": EventFragment;
    "ExecutionFromModuleSuccess(address)": EventFragment;
    "ExecutionSuccess(bytes32,uint256)": EventFragment;
    "RemovedOwner(address)": EventFragment;
    "SafeReceived(address,uint256)": EventFragment;
    "SafeSetup(address,address[],uint256,address,address)": EventFragment;
    "SignMsg(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApproveHash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedFallbackHandler"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedGuard"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedThreshold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisabledModule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnabledModule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFromModuleFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFromModuleSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SafeReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SafeSetup"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignMsg"): EventFragment;
}

export class GnosisSafe extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GnosisSafeInterface;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "VERSION()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addOwnerWithThreshold(address,uint256)"(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approveHash(
      hashToApprove: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveHash(bytes32)"(
      hashToApprove: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approvedHashes(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "approvedHashes(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    changeThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeThreshold(uint256)"(
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    checkNSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      requiredSignatures: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "checkNSignatures(bytes32,bytes,bytes,uint256)"(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      requiredSignatures: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    checkSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    "checkSignatures(bytes32,bytes,bytes)"(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: void;
    }>;

    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "disableModule(address,address)"(
      prevModule: string,
      module: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "domainSeparator()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    enableModule(
      module: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "enableModule(address)"(
      module: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "execTransactionFromModule(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getChainId(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getChainId()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      array: string[];
      next: string;
      0: string[];
      1: string;
    }>;

    "getModulesPaginated(address,uint256)"(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      array: string[];
      next: string;
      0: string[];
      1: string;
    }>;

    getOwners(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    "getOwners()"(overrides?: CallOverrides): Promise<{
      0: string[];
    }>;

    getStorageAt(
      offset: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getStorageAt(uint256,uint256)"(
      offset: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getThreshold(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "getThreshold()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isModuleEnabled(
      module: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isModuleEnabled(address)"(
      module: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    nonce(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "nonce()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeOwner(address,address,uint256)"(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    requiredTxGas(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "requiredTxGas(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFallbackHandler(
      handler: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFallbackHandler(address)"(
      handler: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGuard(
      guard: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGuard(address)"(
      guard: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setup(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setup(address[],uint256,address,bytes,address,address,uint256,address)"(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    signedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "signedMessages(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    simulateAndRevert(
      targetContract: string,
      calldataPayload: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "simulateAndRevert(address,bytes)"(
      targetContract: string,
      calldataPayload: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "swapOwner(address,address,address)"(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  "VERSION()"(overrides?: CallOverrides): Promise<string>;

  addOwnerWithThreshold(
    owner: string,
    _threshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addOwnerWithThreshold(address,uint256)"(
    owner: string,
    _threshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approveHash(
    hashToApprove: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveHash(bytes32)"(
    hashToApprove: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approvedHashes(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "approvedHashes(address,bytes32)"(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeThreshold(
    _threshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeThreshold(uint256)"(
    _threshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  checkNSignatures(
    dataHash: BytesLike,
    data: BytesLike,
    signatures: BytesLike,
    requiredSignatures: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "checkNSignatures(bytes32,bytes,bytes,uint256)"(
    dataHash: BytesLike,
    data: BytesLike,
    signatures: BytesLike,
    requiredSignatures: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  checkSignatures(
    dataHash: BytesLike,
    data: BytesLike,
    signatures: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  "checkSignatures(bytes32,bytes,bytes)"(
    dataHash: BytesLike,
    data: BytesLike,
    signatures: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  disableModule(
    prevModule: string,
    module: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "disableModule(address,address)"(
    prevModule: string,
    module: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  "domainSeparator()"(overrides?: CallOverrides): Promise<string>;

  enableModule(
    module: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "enableModule(address)"(
    module: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  encodeTransactionData(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  execTransaction(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    signatures: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)"(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    signatures: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  execTransactionFromModule(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "execTransactionFromModule(address,uint256,bytes,uint8)"(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  execTransactionFromModuleReturnData(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)"(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  "getChainId()"(overrides?: CallOverrides): Promise<BigNumber>;

  getModulesPaginated(
    start: string,
    pageSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    array: string[];
    next: string;
    0: string[];
    1: string;
  }>;

  "getModulesPaginated(address,uint256)"(
    start: string,
    pageSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    array: string[];
    next: string;
    0: string[];
    1: string;
  }>;

  getOwners(overrides?: CallOverrides): Promise<string[]>;

  "getOwners()"(overrides?: CallOverrides): Promise<string[]>;

  getStorageAt(
    offset: BigNumberish,
    length: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getStorageAt(uint256,uint256)"(
    offset: BigNumberish,
    length: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  "getThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTransactionHash(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isModuleEnabled(module: string, overrides?: CallOverrides): Promise<boolean>;

  "isModuleEnabled(address)"(
    module: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwner(owner: string, overrides?: CallOverrides): Promise<boolean>;

  "isOwner(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  "nonce()"(overrides?: CallOverrides): Promise<BigNumber>;

  removeOwner(
    prevOwner: string,
    owner: string,
    _threshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeOwner(address,address,uint256)"(
    prevOwner: string,
    owner: string,
    _threshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  requiredTxGas(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "requiredTxGas(address,uint256,bytes,uint8)"(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFallbackHandler(
    handler: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFallbackHandler(address)"(
    handler: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGuard(guard: string, overrides?: Overrides): Promise<ContractTransaction>;

  "setGuard(address)"(
    guard: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setup(
    _owners: string[],
    _threshold: BigNumberish,
    to: string,
    data: BytesLike,
    fallbackHandler: string,
    paymentToken: string,
    payment: BigNumberish,
    paymentReceiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setup(address[],uint256,address,bytes,address,address,uint256,address)"(
    _owners: string[],
    _threshold: BigNumberish,
    to: string,
    data: BytesLike,
    fallbackHandler: string,
    paymentToken: string,
    payment: BigNumberish,
    paymentReceiver: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  signedMessages(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "signedMessages(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  simulateAndRevert(
    targetContract: string,
    calldataPayload: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "simulateAndRevert(address,bytes)"(
    targetContract: string,
    calldataPayload: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  swapOwner(
    prevOwner: string,
    oldOwner: string,
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "swapOwner(address,address,address)"(
    prevOwner: string,
    oldOwner: string,
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    "VERSION()"(overrides?: CallOverrides): Promise<string>;

    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addOwnerWithThreshold(address,uint256)"(
      owner: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveHash(
      hashToApprove: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveHash(bytes32)"(
      hashToApprove: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    approvedHashes(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "approvedHashes(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeThreshold(
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeThreshold(uint256)"(
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkNSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      requiredSignatures: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "checkNSignatures(bytes32,bytes,bytes,uint256)"(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      requiredSignatures: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "checkSignatures(bytes32,bytes,bytes)"(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    disableModule(
      prevModule: string,
      module: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "disableModule(address,address)"(
      prevModule: string,
      module: string,
      overrides?: CallOverrides
    ): Promise<void>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    "domainSeparator()"(overrides?: CallOverrides): Promise<string>;

    enableModule(module: string, overrides?: CallOverrides): Promise<void>;

    "enableModule(address)"(
      module: string,
      overrides?: CallOverrides
    ): Promise<void>;

    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "execTransactionFromModule(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      success: boolean;
      returnData: string;
      0: boolean;
      1: string;
    }>;

    "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      success: boolean;
      returnData: string;
      0: boolean;
      1: string;
    }>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    "getChainId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      array: string[];
      next: string;
      0: string[];
      1: string;
    }>;

    "getModulesPaginated(address,uint256)"(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      array: string[];
      next: string;
      0: string[];
      1: string;
    }>;

    getOwners(overrides?: CallOverrides): Promise<string[]>;

    "getOwners()"(overrides?: CallOverrides): Promise<string[]>;

    getStorageAt(
      offset: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getStorageAt(uint256,uint256)"(
      offset: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "getThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isModuleEnabled(
      module: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isModuleEnabled(address)"(
      module: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(owner: string, overrides?: CallOverrides): Promise<boolean>;

    "isOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    "nonce()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeOwner(address,address,uint256)"(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    requiredTxGas(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "requiredTxGas(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFallbackHandler(
      handler: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFallbackHandler(address)"(
      handler: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGuard(guard: string, overrides?: CallOverrides): Promise<void>;

    "setGuard(address)"(
      guard: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setup(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setup(address[],uint256,address,bytes,address,address,uint256,address)"(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    signedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "signedMessages(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    simulateAndRevert(
      targetContract: string,
      calldataPayload: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "simulateAndRevert(address,bytes)"(
      targetContract: string,
      calldataPayload: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "swapOwner(address,address,address)"(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddedOwner(owner: null): EventFilter;

    ApproveHash(
      approvedHash: BytesLike | null,
      owner: string | null
    ): EventFilter;

    ChangedFallbackHandler(handler: null): EventFilter;

    ChangedGuard(guard: null): EventFilter;

    ChangedThreshold(threshold: null): EventFilter;

    DisabledModule(module: null): EventFilter;

    EnabledModule(module: null): EventFilter;

    ExecutionFailure(txHash: null, payment: null): EventFilter;

    ExecutionFromModuleFailure(module: string | null): EventFilter;

    ExecutionFromModuleSuccess(module: string | null): EventFilter;

    ExecutionSuccess(txHash: null, payment: null): EventFilter;

    RemovedOwner(owner: null): EventFilter;

    SafeReceived(sender: string | null, value: null): EventFilter;

    SafeSetup(
      initiator: string | null,
      owners: null,
      threshold: null,
      initializer: null,
      fallbackHandler: null
    ): EventFilter;

    SignMsg(msgHash: BytesLike | null): EventFilter;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    "VERSION()"(overrides?: CallOverrides): Promise<BigNumber>;

    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addOwnerWithThreshold(address,uint256)"(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approveHash(
      hashToApprove: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approveHash(bytes32)"(
      hashToApprove: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approvedHashes(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "approvedHashes(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeThreshold(uint256)"(
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    checkNSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      requiredSignatures: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkNSignatures(bytes32,bytes,bytes,uint256)"(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      requiredSignatures: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkSignatures(bytes32,bytes,bytes)"(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "disableModule(address,address)"(
      prevModule: string,
      module: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    "domainSeparator()"(overrides?: CallOverrides): Promise<BigNumber>;

    enableModule(module: string, overrides?: Overrides): Promise<BigNumber>;

    "enableModule(address)"(
      module: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "execTransactionFromModule(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    "getChainId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getModulesPaginated(address,uint256)"(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwners(overrides?: CallOverrides): Promise<BigNumber>;

    "getOwners()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStorageAt(
      offset: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStorageAt(uint256,uint256)"(
      offset: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    "getThreshold()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isModuleEnabled(
      module: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isModuleEnabled(address)"(
      module: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    "nonce()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeOwner(address,address,uint256)"(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    requiredTxGas(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "requiredTxGas(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFallbackHandler(
      handler: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFallbackHandler(address)"(
      handler: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGuard(guard: string, overrides?: Overrides): Promise<BigNumber>;

    "setGuard(address)"(
      guard: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setup(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setup(address[],uint256,address,bytes,address,address,uint256,address)"(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    signedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "signedMessages(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    simulateAndRevert(
      targetContract: string,
      calldataPayload: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "simulateAndRevert(address,bytes)"(
      targetContract: string,
      calldataPayload: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "swapOwner(address,address,address)"(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "VERSION()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addOwnerWithThreshold(address,uint256)"(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approveHash(
      hashToApprove: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveHash(bytes32)"(
      hashToApprove: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approvedHashes(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "approvedHashes(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeThreshold(uint256)"(
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    checkNSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      requiredSignatures: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkNSignatures(bytes32,bytes,bytes,uint256)"(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      requiredSignatures: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkSignatures(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkSignatures(bytes32,bytes,bytes)"(
      dataHash: BytesLike,
      data: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "disableModule(address,address)"(
      prevModule: string,
      module: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "domainSeparator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    enableModule(
      module: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "enableModule(address)"(
      module: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    encodeTransactionData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "encodeTransactionData(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "execTransactionFromModule(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getChainId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getModulesPaginated(address,uint256)"(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOwners()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStorageAt(
      offset: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStorageAt(uint256,uint256)"(
      offset: BigNumberish,
      length: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getThreshold()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isModuleEnabled(
      module: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isModuleEnabled(address)"(
      module: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isOwner(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nonce()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeOwner(address,address,uint256)"(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    requiredTxGas(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "requiredTxGas(address,uint256,bytes,uint8)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFallbackHandler(
      handler: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFallbackHandler(address)"(
      handler: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGuard(
      guard: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGuard(address)"(
      guard: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setup(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setup(address[],uint256,address,bytes,address,address,uint256,address)"(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    signedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "signedMessages(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    simulateAndRevert(
      targetContract: string,
      calldataPayload: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "simulateAndRevert(address,bytes)"(
      targetContract: string,
      calldataPayload: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "swapOwner(address,address,address)"(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
