/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SafeMinionFactoryInterface extends ethers.utils.Interface {
  functions: {
    "minionList(uint256)": FunctionFragment;
    "minionType()": FunctionFragment;
    "minions(address)": FunctionFragment;
    "summonMinion(address,address,address,string,uint256)": FunctionFragment;
    "template()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "minionList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minionType",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minions", values: [string]): string;
  encodeFunctionData(
    functionFragment: "summonMinion",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "template", values?: undefined): string;

  decodeFunctionResult(functionFragment: "minionList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minionType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "summonMinion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "template", data: BytesLike): Result;

  events: {
    "SummonMinion(address,address,string,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SummonMinion"): EventFragment;
}

export class SafeMinionFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SafeMinionFactoryInterface;

  functions: {
    minionList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "minionList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    minionType(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "minionType()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    minions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      moloch: string;
      details: string;
      0: string;
      1: string;
    }>;

    "minions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      moloch: string;
      details: string;
      0: string;
      1: string;
    }>;

    summonMinion(
      moloch: string,
      executor: string,
      multisend: string,
      details: string,
      minQuorum: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "summonMinion(address,address,address,string,uint256)"(
      moloch: string,
      executor: string,
      multisend: string,
      details: string,
      minQuorum: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    template(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "template()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;
  };

  minionList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "minionList(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  minionType(overrides?: CallOverrides): Promise<string>;

  "minionType()"(overrides?: CallOverrides): Promise<string>;

  minions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    moloch: string;
    details: string;
    0: string;
    1: string;
  }>;

  "minions(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    moloch: string;
    details: string;
    0: string;
    1: string;
  }>;

  summonMinion(
    moloch: string,
    executor: string,
    multisend: string,
    details: string,
    minQuorum: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "summonMinion(address,address,address,string,uint256)"(
    moloch: string,
    executor: string,
    multisend: string,
    details: string,
    minQuorum: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  template(overrides?: CallOverrides): Promise<string>;

  "template()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    minionList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "minionList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    minionType(overrides?: CallOverrides): Promise<string>;

    "minionType()"(overrides?: CallOverrides): Promise<string>;

    minions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      moloch: string;
      details: string;
      0: string;
      1: string;
    }>;

    "minions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      moloch: string;
      details: string;
      0: string;
      1: string;
    }>;

    summonMinion(
      moloch: string,
      executor: string,
      multisend: string,
      details: string,
      minQuorum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "summonMinion(address,address,address,string,uint256)"(
      moloch: string,
      executor: string,
      multisend: string,
      details: string,
      minQuorum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    template(overrides?: CallOverrides): Promise<string>;

    "template()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    SummonMinion(
      minion: string | null,
      moloch: string | null,
      details: null,
      minionType: null,
      minQuorum: null
    ): EventFilter;
  };

  estimateGas: {
    minionList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minionList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minionType(overrides?: CallOverrides): Promise<BigNumber>;

    "minionType()"(overrides?: CallOverrides): Promise<BigNumber>;

    minions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "minions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    summonMinion(
      moloch: string,
      executor: string,
      multisend: string,
      details: string,
      minQuorum: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "summonMinion(address,address,address,string,uint256)"(
      moloch: string,
      executor: string,
      multisend: string,
      details: string,
      minQuorum: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    template(overrides?: CallOverrides): Promise<BigNumber>;

    "template()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    minionList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minionList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minionType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minionType()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minions(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    summonMinion(
      moloch: string,
      executor: string,
      multisend: string,
      details: string,
      minQuorum: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "summonMinion(address,address,address,string,uint256)"(
      moloch: string,
      executor: string,
      multisend: string,
      details: string,
      minQuorum: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    template(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "template()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
