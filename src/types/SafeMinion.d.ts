/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SafeMinionInterface extends ethers.utils.Interface {
  functions: {
    "actions(uint256)": FunctionFragment;
    "cancelAction(uint256)": FunctionFragment;
    "changeOwner(address)": FunctionFragment;
    "crossWithdraw(address,address,uint256,bool)": FunctionFragment;
    "deleteAction(uint256)": FunctionFragment;
    "doWithdraw(address,uint256)": FunctionFragment;
    "executeAction(uint256,bytes)": FunctionFragment;
    "executor()": FunctionFragment;
    "hashOperation(bytes)": FunctionFragment;
    "init(address,address,address,uint256)": FunctionFragment;
    "isMember(address)": FunctionFragment;
    "isValidSignature(bytes32,bytes)": FunctionFragment;
    "minQuorum()": FunctionFragment;
    "module()": FunctionFragment;
    "moloch()": FunctionFragment;
    "molochDepositToken()": FunctionFragment;
    "multisend()": FunctionFragment;
    "proposeAction(bytes,address,uint256,string,bool)": FunctionFragment;
    "setModule(address)": FunctionFragment;
    "sign(bytes32,bytes32,bytes4)": FunctionFragment;
    "signatures(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "actions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "changeOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "crossWithdraw",
    values: [string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doWithdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeAction",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "executor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hashOperation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isMember", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isValidSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "minQuorum", values?: undefined): string;
  encodeFunctionData(functionFragment: "module", values?: undefined): string;
  encodeFunctionData(functionFragment: "moloch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "molochDepositToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "multisend", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeAction",
    values: [BytesLike, string, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "setModule", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sign",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signatures",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "actions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crossWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "doWithdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minQuorum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "module", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moloch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "molochDepositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multisend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setModule", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sign", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "signatures", data: BytesLike): Result;

  events: {
    "ActionCanceled(uint256)": EventFragment;
    "ActionDeleted(uint256)": EventFragment;
    "ChangeOwner(address)": EventFragment;
    "CrossWithdraw(address,address,uint256)": EventFragment;
    "DoWithdraw(address,uint256)": EventFragment;
    "ExecuteAction(bytes32,uint256,bytes,address)": EventFragment;
    "ExecuteEscapeHatch(address,uint256,bytes,address)": EventFragment;
    "ExecuteSignature(uint256,address)": EventFragment;
    "ProposeNewAction(bytes32,uint256,address,uint256,address,bool,bytes)": EventFragment;
    "ProposeSignature(uint256,bytes32,address)": EventFragment;
    "PulledFunds(address,uint256)": EventFragment;
    "SetModule(address)": EventFragment;
    "SignatureCanceled(uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActionCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ActionDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CrossWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DoWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteEscapeHatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteSignature"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposeNewAction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposeSignature"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PulledFunds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetModule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignatureCanceled"): EventFragment;
}

export class SafeMinion extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SafeMinionInterface;

  functions: {
    actions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: string;
      proposer: string;
      executed: boolean;
      token: string;
      amount: BigNumber;
      moloch: string;
      memberOrModule: boolean;
      0: string;
      1: string;
      2: boolean;
      3: string;
      4: BigNumber;
      5: string;
      6: boolean;
    }>;

    "actions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: string;
      proposer: string;
      executed: boolean;
      token: string;
      amount: BigNumber;
      moloch: string;
      memberOrModule: boolean;
      0: string;
      1: string;
      2: boolean;
      3: string;
      4: BigNumber;
      5: string;
      6: boolean;
    }>;

    cancelAction(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelAction(uint256)"(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeOwner(
      _moloch: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeOwner(address)"(
      _moloch: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    crossWithdraw(
      target: string,
      token: string,
      amount: BigNumberish,
      transfer: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "crossWithdraw(address,address,uint256,bool)"(
      target: string,
      token: string,
      amount: BigNumberish,
      transfer: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deleteAction(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deleteAction(uint256)"(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    doWithdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "doWithdraw(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeAction(
      proposalId: BigNumberish,
      transactions: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeAction(uint256,bytes)"(
      proposalId: BigNumberish,
      transactions: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executor(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "executor()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    hashOperation(
      transactions: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      hash: string;
      0: string;
    }>;

    "hashOperation(bytes)"(
      transactions: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      hash: string;
      0: string;
    }>;

    init(
      _moloch: string,
      _executor: string,
      _multisend: string,
      _minQuorum: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "init(address,address,address,uint256)"(
      _moloch: string,
      _executor: string,
      _multisend: string,
      _minQuorum: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isMember(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isMember(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    isValidSignature(
      permissionHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "isValidSignature(bytes32,bytes)"(
      permissionHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    minQuorum(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "minQuorum()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    module(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "module()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    moloch(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "moloch()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    molochDepositToken(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "molochDepositToken()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    multisend(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "multisend()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    proposeAction(
      transactions: BytesLike,
      withdrawToken: string,
      withdrawAmount: BigNumberish,
      details: string,
      memberOrModule: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "proposeAction(bytes,address,uint256,string,bool)"(
      transactions: BytesLike,
      withdrawToken: string,
      withdrawAmount: BigNumberish,
      details: string,
      memberOrModule: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setModule(
      _module: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setModule(address)"(
      _module: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sign(
      permissionHash: BytesLike,
      signatureHash: BytesLike,
      magicValue: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sign(bytes32,bytes32,bytes4)"(
      permissionHash: BytesLike,
      signatureHash: BytesLike,
      magicValue: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    signatures(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      signatureHash: string;
      magicValue: string;
      0: string;
      1: string;
    }>;

    "signatures(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      signatureHash: string;
      magicValue: string;
      0: string;
      1: string;
    }>;
  };

  actions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: string;
    proposer: string;
    executed: boolean;
    token: string;
    amount: BigNumber;
    moloch: string;
    memberOrModule: boolean;
    0: string;
    1: string;
    2: boolean;
    3: string;
    4: BigNumber;
    5: string;
    6: boolean;
  }>;

  "actions(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: string;
    proposer: string;
    executed: boolean;
    token: string;
    amount: BigNumber;
    moloch: string;
    memberOrModule: boolean;
    0: string;
    1: string;
    2: boolean;
    3: string;
    4: BigNumber;
    5: string;
    6: boolean;
  }>;

  cancelAction(
    _proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelAction(uint256)"(
    _proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeOwner(
    _moloch: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeOwner(address)"(
    _moloch: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  crossWithdraw(
    target: string,
    token: string,
    amount: BigNumberish,
    transfer: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "crossWithdraw(address,address,uint256,bool)"(
    target: string,
    token: string,
    amount: BigNumberish,
    transfer: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deleteAction(
    _proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deleteAction(uint256)"(
    _proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  doWithdraw(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "doWithdraw(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeAction(
    proposalId: BigNumberish,
    transactions: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeAction(uint256,bytes)"(
    proposalId: BigNumberish,
    transactions: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executor(overrides?: CallOverrides): Promise<string>;

  "executor()"(overrides?: CallOverrides): Promise<string>;

  hashOperation(
    transactions: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "hashOperation(bytes)"(
    transactions: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  init(
    _moloch: string,
    _executor: string,
    _multisend: string,
    _minQuorum: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "init(address,address,address,uint256)"(
    _moloch: string,
    _executor: string,
    _multisend: string,
    _minQuorum: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isMember(user: string, overrides?: CallOverrides): Promise<boolean>;

  "isMember(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidSignature(
    permissionHash: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "isValidSignature(bytes32,bytes)"(
    permissionHash: BytesLike,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  minQuorum(overrides?: CallOverrides): Promise<BigNumber>;

  "minQuorum()"(overrides?: CallOverrides): Promise<BigNumber>;

  module(overrides?: CallOverrides): Promise<string>;

  "module()"(overrides?: CallOverrides): Promise<string>;

  moloch(overrides?: CallOverrides): Promise<string>;

  "moloch()"(overrides?: CallOverrides): Promise<string>;

  molochDepositToken(overrides?: CallOverrides): Promise<string>;

  "molochDepositToken()"(overrides?: CallOverrides): Promise<string>;

  multisend(overrides?: CallOverrides): Promise<string>;

  "multisend()"(overrides?: CallOverrides): Promise<string>;

  proposeAction(
    transactions: BytesLike,
    withdrawToken: string,
    withdrawAmount: BigNumberish,
    details: string,
    memberOrModule: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "proposeAction(bytes,address,uint256,string,bool)"(
    transactions: BytesLike,
    withdrawToken: string,
    withdrawAmount: BigNumberish,
    details: string,
    memberOrModule: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setModule(
    _module: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setModule(address)"(
    _module: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sign(
    permissionHash: BytesLike,
    signatureHash: BytesLike,
    magicValue: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sign(bytes32,bytes32,bytes4)"(
    permissionHash: BytesLike,
    signatureHash: BytesLike,
    magicValue: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  signatures(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    signatureHash: string;
    magicValue: string;
    0: string;
    1: string;
  }>;

  "signatures(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    signatureHash: string;
    magicValue: string;
    0: string;
    1: string;
  }>;

  callStatic: {
    actions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: string;
      proposer: string;
      executed: boolean;
      token: string;
      amount: BigNumber;
      moloch: string;
      memberOrModule: boolean;
      0: string;
      1: string;
      2: boolean;
      3: string;
      4: BigNumber;
      5: string;
      6: boolean;
    }>;

    "actions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: string;
      proposer: string;
      executed: boolean;
      token: string;
      amount: BigNumber;
      moloch: string;
      memberOrModule: boolean;
      0: string;
      1: string;
      2: boolean;
      3: string;
      4: BigNumber;
      5: string;
      6: boolean;
    }>;

    cancelAction(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelAction(uint256)"(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeOwner(_moloch: string, overrides?: CallOverrides): Promise<boolean>;

    "changeOwner(address)"(
      _moloch: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    crossWithdraw(
      target: string,
      token: string,
      amount: BigNumberish,
      transfer: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "crossWithdraw(address,address,uint256,bool)"(
      target: string,
      token: string,
      amount: BigNumberish,
      transfer: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteAction(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "deleteAction(uint256)"(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    doWithdraw(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "doWithdraw(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeAction(
      proposalId: BigNumberish,
      transactions: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "executeAction(uint256,bytes)"(
      proposalId: BigNumberish,
      transactions: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executor(overrides?: CallOverrides): Promise<string>;

    "executor()"(overrides?: CallOverrides): Promise<string>;

    hashOperation(
      transactions: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "hashOperation(bytes)"(
      transactions: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    init(
      _moloch: string,
      _executor: string,
      _multisend: string,
      _minQuorum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "init(address,address,address,uint256)"(
      _moloch: string,
      _executor: string,
      _multisend: string,
      _minQuorum: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isMember(user: string, overrides?: CallOverrides): Promise<boolean>;

    "isMember(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidSignature(
      permissionHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "isValidSignature(bytes32,bytes)"(
      permissionHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    minQuorum(overrides?: CallOverrides): Promise<BigNumber>;

    "minQuorum()"(overrides?: CallOverrides): Promise<BigNumber>;

    module(overrides?: CallOverrides): Promise<string>;

    "module()"(overrides?: CallOverrides): Promise<string>;

    moloch(overrides?: CallOverrides): Promise<string>;

    "moloch()"(overrides?: CallOverrides): Promise<string>;

    molochDepositToken(overrides?: CallOverrides): Promise<string>;

    "molochDepositToken()"(overrides?: CallOverrides): Promise<string>;

    multisend(overrides?: CallOverrides): Promise<string>;

    "multisend()"(overrides?: CallOverrides): Promise<string>;

    proposeAction(
      transactions: BytesLike,
      withdrawToken: string,
      withdrawAmount: BigNumberish,
      details: string,
      memberOrModule: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposeAction(bytes,address,uint256,string,bool)"(
      transactions: BytesLike,
      withdrawToken: string,
      withdrawAmount: BigNumberish,
      details: string,
      memberOrModule: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setModule(_module: string, overrides?: CallOverrides): Promise<boolean>;

    "setModule(address)"(
      _module: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sign(
      permissionHash: BytesLike,
      signatureHash: BytesLike,
      magicValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "sign(bytes32,bytes32,bytes4)"(
      permissionHash: BytesLike,
      signatureHash: BytesLike,
      magicValue: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    signatures(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      signatureHash: string;
      magicValue: string;
      0: string;
      1: string;
    }>;

    "signatures(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      signatureHash: string;
      magicValue: string;
      0: string;
      1: string;
    }>;
  };

  filters: {
    ActionCanceled(proposalId: null): EventFilter;

    ActionDeleted(proposalId: null): EventFilter;

    ChangeOwner(owner: null): EventFilter;

    CrossWithdraw(target: null, token: null, amount: null): EventFilter;

    DoWithdraw(token: null, amount: null): EventFilter;

    ExecuteAction(
      id: BytesLike | null,
      proposalId: BigNumberish | null,
      transactions: null,
      executor: null
    ): EventFilter;

    ExecuteEscapeHatch(
      target: null,
      value: null,
      data: null,
      executor: null
    ): EventFilter;

    ExecuteSignature(proposalId: null, executor: null): EventFilter;

    ProposeNewAction(
      id: BytesLike | null,
      proposalId: BigNumberish | null,
      withdrawToken: null,
      withdrawAmount: null,
      moloch: null,
      memberOrModule: null,
      transactions: null
    ): EventFilter;

    ProposeSignature(
      proposalId: null,
      msgHash: null,
      proposer: null
    ): EventFilter;

    PulledFunds(moloch: null, amount: null): EventFilter;

    SetModule(module: null): EventFilter;

    SignatureCanceled(proposalId: null, msgHash: null): EventFilter;
  };

  estimateGas: {
    actions(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "actions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelAction(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelAction(uint256)"(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeOwner(_moloch: string, overrides?: Overrides): Promise<BigNumber>;

    "changeOwner(address)"(
      _moloch: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    crossWithdraw(
      target: string,
      token: string,
      amount: BigNumberish,
      transfer: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "crossWithdraw(address,address,uint256,bool)"(
      target: string,
      token: string,
      amount: BigNumberish,
      transfer: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deleteAction(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deleteAction(uint256)"(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    doWithdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "doWithdraw(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    executeAction(
      proposalId: BigNumberish,
      transactions: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeAction(uint256,bytes)"(
      proposalId: BigNumberish,
      transactions: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    executor(overrides?: CallOverrides): Promise<BigNumber>;

    "executor()"(overrides?: CallOverrides): Promise<BigNumber>;

    hashOperation(
      transactions: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hashOperation(bytes)"(
      transactions: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _moloch: string,
      _executor: string,
      _multisend: string,
      _minQuorum: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "init(address,address,address,uint256)"(
      _moloch: string,
      _executor: string,
      _multisend: string,
      _minQuorum: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isMember(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isMember(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidSignature(
      permissionHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidSignature(bytes32,bytes)"(
      permissionHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minQuorum(overrides?: CallOverrides): Promise<BigNumber>;

    "minQuorum()"(overrides?: CallOverrides): Promise<BigNumber>;

    module(overrides?: CallOverrides): Promise<BigNumber>;

    "module()"(overrides?: CallOverrides): Promise<BigNumber>;

    moloch(overrides?: CallOverrides): Promise<BigNumber>;

    "moloch()"(overrides?: CallOverrides): Promise<BigNumber>;

    molochDepositToken(overrides?: CallOverrides): Promise<BigNumber>;

    "molochDepositToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    multisend(overrides?: CallOverrides): Promise<BigNumber>;

    "multisend()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposeAction(
      transactions: BytesLike,
      withdrawToken: string,
      withdrawAmount: BigNumberish,
      details: string,
      memberOrModule: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "proposeAction(bytes,address,uint256,string,bool)"(
      transactions: BytesLike,
      withdrawToken: string,
      withdrawAmount: BigNumberish,
      details: string,
      memberOrModule: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setModule(_module: string, overrides?: Overrides): Promise<BigNumber>;

    "setModule(address)"(
      _module: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sign(
      permissionHash: BytesLike,
      signatureHash: BytesLike,
      magicValue: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sign(bytes32,bytes32,bytes4)"(
      permissionHash: BytesLike,
      signatureHash: BytesLike,
      magicValue: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    signatures(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "signatures(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    actions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "actions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelAction(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelAction(uint256)"(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeOwner(
      _moloch: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeOwner(address)"(
      _moloch: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    crossWithdraw(
      target: string,
      token: string,
      amount: BigNumberish,
      transfer: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "crossWithdraw(address,address,uint256,bool)"(
      target: string,
      token: string,
      amount: BigNumberish,
      transfer: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deleteAction(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deleteAction(uint256)"(
      _proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    doWithdraw(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "doWithdraw(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeAction(
      proposalId: BigNumberish,
      transactions: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeAction(uint256,bytes)"(
      proposalId: BigNumberish,
      transactions: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "executor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hashOperation(
      transactions: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hashOperation(bytes)"(
      transactions: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _moloch: string,
      _executor: string,
      _multisend: string,
      _minQuorum: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "init(address,address,address,uint256)"(
      _moloch: string,
      _executor: string,
      _multisend: string,
      _minQuorum: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isMember(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isMember(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidSignature(
      permissionHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidSignature(bytes32,bytes)"(
      permissionHash: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minQuorum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minQuorum()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    module(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "module()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moloch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "moloch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    molochDepositToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "molochDepositToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multisend(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "multisend()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeAction(
      transactions: BytesLike,
      withdrawToken: string,
      withdrawAmount: BigNumberish,
      details: string,
      memberOrModule: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "proposeAction(bytes,address,uint256,string,bool)"(
      transactions: BytesLike,
      withdrawToken: string,
      withdrawAmount: BigNumberish,
      details: string,
      memberOrModule: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setModule(
      _module: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setModule(address)"(
      _module: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sign(
      permissionHash: BytesLike,
      signatureHash: BytesLike,
      magicValue: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sign(bytes32,bytes32,bytes4)"(
      permissionHash: BytesLike,
      signatureHash: BytesLike,
      magicValue: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    signatures(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "signatures(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
